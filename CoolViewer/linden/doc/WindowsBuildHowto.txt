1.- Build dependencies:

You need a Visual Studio 2017 Community Edition (1) C++ build environment,
Python and CMake.

You (still) can get VS2017 Community Edition for free but will need to join
Microsoft's "Visual Studio Dev Essentials" to get the download link (2).

When installing VS2017 (3), only install the desktop application C++
development tools (VC++ 2017, ATL Visual C++, VC++ 2017 latest v141 tools, SDK
CRT universal runtime, Visual C++ tools for CMake, JIT debugger), with the
latest Windows 10 SDK (the one selected by default in the installer); you do
not need to install any other SDK, even for running the viewer under Windows 7,
8 or 11 since the build target API version (Win 7) is specified in the viewer
cmake files via the appropriate defines. Do not install the bundled Python
either.

Get Python (build tested with Python v3.6.8 32 bits and Python 3.8.6 64 bits)
from Python's site (4).
Run the installer as administrator (right click, "Run as administrator"); this
way, you will be able to install Python in C:\Programs, for example (instead
of in your roaming profile).
You may use the custom installation option to remove the unnecessary components
that would otherwise clutter your hard disk/SSD for nothing: just keep Python
itself and the Python launcher.
Do make sure to ask the installer to update your PATH environment variable.

For CMake, you may use the latest release (the Cool VL Viewer build system is
regularly updated to work with the latest cmake version); v3.16+ recommended
for a faster compilation. Get it from from CMake's site:
https://cmake.org/files/LatestRelease/ (you may use the 64 bits version).
Do ask to the installer to update your PATH environment variable so that cmake
can be found.

You may have to restart your session after installation so that the new PATH is
taken into account.

To verify that everything is installed properly, you may open a command prompt
console and type the following commands:
python --version
cmake --version


2.- Building instructions:

Untar (5) the Cool VL Viewer sources and place the resulting "linden" folder
inside the Visual Studio "source" directory.
You may want to open the linden/indra/cmake/00-BuildOptions.cmake file to
review the various build options; they are set to their default used for the
official builds, but you may want to add or remove features.

Then you can choose between two methods:

a.- GUI build:

Point a file explorer into the linden/ directory of the sources tree and, for
VS2017, double-click on "windows-prebuild-vs2017.bat" (6), so to launch the
build configuration step.

After the script is finished with configuring the sources, point the explorer
inside the linden/build-vs* that just got created and double-click on the
"CoolVLViewer.sln" file so to load it into Visual Studio.

Then simply press CTRL SHIFT B to launch the viewer building process.


b.- Batch-file building (7):

Point a file explorer into the linden/ directory of the sources tree and, for
VS2017, double-click on "windows-build-vs2017.bat", so to launch the build.


Note: since all the development and debugging process of the Cool VL Viewer is
done under Linux, only the "Release" build target is supported and available
under Windows. You may nonetheless decently debug the viewer under Windows by
simply copying the CoolVLViewer.pdb file (and maybe the llcommon.pdb, if you
built llcommon.dll instead of having it statically linked to the viewer)
produced during the building process into the viewer-win64-release directory
and launch/debug the viewer from there.


3.- Packaging and distribution:

Once the build has completed successfully, you get a ready to launch viewer in:
linden/viewer-win64-release/

If you wish to distribute your build, you will need to use InstallJammer v1.3
(https://sourceforge.net/projects/installjammer/files/InstallJammer/snapshots/installjammer-1.3-snapshot.zip/download)
with the provided script in linden/scripts/installers/windows64/ (in the latter
script, using WordPad or an editor able to deal with UNIX files, change the
occurrences of "C:/Users/root/source/cvxxxx/" with the path of whatever folder
you copied the source files into).
Simply load the CoolVLViewer-x86_64-1.28.x.mpi file into InstallJammer, select
"Build Installers" in the tree on the left, then check "Build for final release"
on the bottom and press the "Build Install" button. The distributable package
will be created in linden/scripts/installers/windows/output/


Notes:
(1) You may also build the viewer with Visual Studio 2019 by using its vc141
    toolset, but such builds are currently unsupported.

(2) https://my.visualstudio.com/Downloads?q=visual%20studio%202017&wt.mc_id=o~msft~vscom~older-downloads

(3) If you want to install VS2019 instead, make sure to select in its installer
    the "MSVC v141 - VS 2017 C++ x64/x86 Build Tools" component (in excess of
    the pre-selected "MSVC v142 - VS 2019 C++ x64/x86 Build Tools" which is
    mandatory).

(4) https://www.python.org/ftp/python/3.8.6/python-3.8.6-amd64.exe

(5) 7-Zip (http://www.7-zip.org/) may be used to extract the viewer sources
    from the tar archive.

(6) Or, for VS2019, or on "windows-prebuild-vs2019-vc141.bat".

(7) Not for VS2019 builds, and may fail, if VS2017 is not where the batch file
    expects to find it... Modify the PATH in that batch file, in this case.
